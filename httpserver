#!/usr/bin/env python3
import os
import socket
import sys
import threading
import time
from http.server import *
import urllib.request
import urllib.parse
from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE,SIG_DFL)
from cache import Cache

HOSTNAME = socket.gethostname()
ORIGIN_SERVER_PORT = 8080
ORIGIN_SERVER = "cs5700cdnorigin.ccs.neu.edu"


def get_time_from_scamper(client_ip):
    stream = os.popen("ping -c 1 " + client_ip)
    output = stream.read()
    startIdx = output.find("rtt")
    ret1 = output[startIdx:]
    startIdx2 = ret1.find("=")
    ret2 = ret1[startIdx2:]
    return ret2.split("/")[1]


class RequestHandler(BaseHTTPRequestHandler):
    cache = None
    def do_GET(self):
        if self.path.startswith('/rtt'):
            parsed_path = urllib.parse.urlparse(self.path)
            query_string = urllib.parse.parse_qs(parsed_path.query)
            parsed_ip = query_string['ip'][0]

            rtt = get_time_from_scamper(parsed_ip)
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(bytes(rtt, 'utf-8'))
            return

        if self.path == "/grading/beacon":
            self.send_response(204)
            self.end_headers()
            return

        html = self.cache.get_data(self.path)

        if html == None:
            with urllib.request.urlopen("http://" + ORIGIN_SERVER + ":" + str(ORIGIN_SERVER_PORT) + self.path) as response:
                html = response.read()
                self.cache.insert_data(self.path, html)

        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(bytes(html))


class HTTPServer:
    def __init__(self, port, origin):
        self.cache = Cache()
        RequestHandler.cache = self.cache
        self.server = ThreadingHTTPServer((HOSTNAME, port), RequestHandler)
        self.port = port
        self.origin = origin

    def run(self):
        thread = threading.Thread(target=self.server.serve_forever)
        thread.daemon = True
        thread.start()

        try:
            while 1:
                time.sleep(1)
                sys.stderr.flush()
                sys.stdout.flush()

        except KeyboardInterrupt:
            pass
        finally:
            self.server.shutdown()
            self.cache.close()



if __name__ == '__main__':
    if len(sys.argv) != 5:
        sys.exit("Invalid number of arguments")
    port = int(sys.argv[2])
    ORIGIN_SERVER = sys.argv[4]
    http_server = HTTPServer(port, ORIGIN_SERVER)
    http_server.run()
